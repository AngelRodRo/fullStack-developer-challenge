scalar Date

type User {
  id: Int
  email: String!
  name: String!
  lastName: String!
  address: String!
  phone: String!
  createdAt: Date
  updatedAt: Date
}

type UserList {
  total: Int!
  items: [User!]!
}

input UserCreateInput {
  email: String!
  name: String!
  lastName: String!
  address: String!
  phone: String!
  password: String!
}

input UserEditInput {
  name: String!
  lastName: String!
  address: String!
  phone: String!
}

input UserCredentials {
  email: String!
  password: String!
}

type UserSuccessLogin {
  user: User!
  token: String!
}

type Query {
  users(filter: String, skip: Int, take: Int): UserList!
}

type Mutation {
  createUser(userInput: UserCreateInput!): User
  editUser(id: Int!, userInput: UserEditInput!): User
  removeUser(id: Int!): Int
  login(userCredentials: UserCredentials!): UserSuccessLogin!
}
